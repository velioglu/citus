CREATE SCHEMA recursive_union;
SET search_path TO recursive_union, public;
CREATE TABLE recursive_union.test (x int, y int);
SELECT create_distributed_table('test', 'x');
 create_distributed_table 
--------------------------
 
(1 row)

CREATE TABLE recursive_union.ref (a int, b int);
SELECT create_reference_table('ref');
 create_reference_table 
------------------------
 
(1 row)

INSERT INTO test VALUES (1,1), (2,2);
INSERT INTO ref VALUES (2,2), (3,3);
-- top-level set operations are supported through recursive planning
SET client_min_messages TO DEBUG;
(SELECT * FROM test) UNION (SELECT * FROM test) ORDER BY 1,2;
DEBUG:  generating subplan 3_1 for subquery SELECT x, y FROM recursive_union.test
DEBUG:  generating subplan 3_2 for subquery SELECT x, y FROM recursive_union.test
DEBUG:  Creating router plan
DEBUG:  Plan is router executable
 x | y 
---+---
 1 | 1
 2 | 2
(2 rows)

(SELECT * FROM test) UNION (SELECT * FROM ref) ORDER BY 1,2;
DEBUG:  generating subplan 6_1 for subquery SELECT x, y FROM recursive_union.test
DEBUG:  Creating router plan
DEBUG:  Plan is router executable
 x | y 
---+---
 1 | 1
 2 | 2
 3 | 3
(3 rows)

(SELECT * FROM ref) UNION (SELECT * FROM ref) ORDER BY 1,2;
DEBUG:  Creating router plan
DEBUG:  Plan is router executable
 a | b 
---+---
 2 | 2
 3 | 3
(2 rows)

(SELECT * FROM test) UNION ALL (SELECT * FROM test) ORDER BY 1,2;
DEBUG:  generating subplan 9_1 for subquery SELECT x, y FROM recursive_union.test
DEBUG:  generating subplan 9_2 for subquery SELECT x, y FROM recursive_union.test
DEBUG:  Creating router plan
DEBUG:  Plan is router executable
 x | y 
---+---
 1 | 1
 1 | 1
 2 | 2
 2 | 2
(4 rows)

(SELECT * FROM test) UNION ALL (SELECT * FROM ref) ORDER BY 1,2;
DEBUG:  generating subplan 12_1 for subquery SELECT x, y FROM recursive_union.test
DEBUG:  Creating router plan
DEBUG:  Plan is router executable
 x | y 
---+---
 1 | 1
 2 | 2
 2 | 2
 3 | 3
(4 rows)

(SELECT * FROM ref) UNION ALL (SELECT * FROM ref) ORDER BY 1,2;
DEBUG:  Creating router plan
DEBUG:  Plan is router executable
 a | b 
---+---
 2 | 2
 2 | 2
 3 | 3
 3 | 3
(4 rows)

(SELECT * FROM test) INTERSECT (SELECT * FROM test) ORDER BY 1,2;
DEBUG:  generating subplan 15_1 for subquery SELECT x, y FROM recursive_union.test
DEBUG:  generating subplan 15_2 for subquery SELECT x, y FROM recursive_union.test
DEBUG:  Creating router plan
DEBUG:  Plan is router executable
 x | y 
---+---
 1 | 1
 2 | 2
(2 rows)

(SELECT * FROM test) INTERSECT (SELECT * FROM ref) ORDER BY 1,2;
DEBUG:  generating subplan 18_1 for subquery SELECT x, y FROM recursive_union.test
DEBUG:  Creating router plan
DEBUG:  Plan is router executable
 x | y 
---+---
 2 | 2
(1 row)

(SELECT * FROM ref) INTERSECT (SELECT * FROM ref) ORDER BY 1,2;
DEBUG:  Creating router plan
DEBUG:  Plan is router executable
 a | b 
---+---
 2 | 2
 3 | 3
(2 rows)

(SELECT * FROM test) EXCEPT (SELECT * FROM test) ORDER BY 1,2;
DEBUG:  generating subplan 21_1 for subquery SELECT x, y FROM recursive_union.test
DEBUG:  generating subplan 21_2 for subquery SELECT x, y FROM recursive_union.test
DEBUG:  Creating router plan
DEBUG:  Plan is router executable
 x | y 
---+---
(0 rows)

(SELECT * FROM test) EXCEPT (SELECT * FROM ref) ORDER BY 1,2;
DEBUG:  generating subplan 24_1 for subquery SELECT x, y FROM recursive_union.test
DEBUG:  Creating router plan
DEBUG:  Plan is router executable
 x | y 
---+---
 1 | 1
(1 row)

(SELECT * FROM ref) EXCEPT (SELECT * FROM ref) ORDER BY 1,2;
DEBUG:  Creating router plan
DEBUG:  Plan is router executable
 a | b 
---+---
(0 rows)

-- more complex set operation trees are supported
(SELECT * FROM test)
INTERSECT
(SELECT * FROM ref)
UNION ALL
(SELECT s, s FROM generate_series(1,10) s)
EXCEPT
(SELECT 1,1)
UNION
(SELECT * FROM test LEFT JOIN ref ON (x = a))
ORDER BY 1,2;
ERROR:  each UNION query must have the same number of columns
LINE 9: (SELECT * FROM test LEFT JOIN ref ON (x = a))
                ^
-- within a subquery, some unions can be pushed down
SELECT * FROM ((SELECT * FROM test) UNION (SELECT * FROM test)) u ORDER BY 1,2;
 x | y 
---+---
 1 | 1
 2 | 2
(2 rows)

SELECT * FROM ((SELECT * FROM test) UNION (SELECT * FROM ref)) u ORDER BY 1,2;
DEBUG:  generating subplan 28_1 for subquery SELECT x, y FROM recursive_union.test
DEBUG:  Creating router plan
DEBUG:  Plan is router executable
DEBUG:  generating subplan 28_2 for subquery SELECT intermediate_result.x, intermediate_result.y FROM read_intermediate_result('28_1'::text, 'binary'::citus_copy_format) intermediate_result(x integer, y integer) UNION SELECT ref.a, ref.b FROM recursive_union.ref
DEBUG:  Creating router plan
DEBUG:  Plan is router executable
 x | y 
---+---
 1 | 1
 2 | 2
 3 | 3
(3 rows)

SELECT * FROM ((SELECT * FROM ref) UNION (SELECT * FROM ref)) u ORDER BY 1,2;
DEBUG:  Creating router plan
DEBUG:  Plan is router executable
 a | b 
---+---
 2 | 2
 3 | 3
(2 rows)

SELECT * FROM ((SELECT * FROM test) UNION ALL (SELECT * FROM test)) u ORDER BY 1,2;
 x | y 
---+---
 1 | 1
 1 | 1
 2 | 2
 2 | 2
(4 rows)

SELECT * FROM ((SELECT * FROM test) UNION ALL (SELECT * FROM ref)) u ORDER BY 1,2;
DEBUG:  generating subplan 33_1 for subquery SELECT x, y FROM recursive_union.test
DEBUG:  Creating router plan
DEBUG:  Plan is router executable
DEBUG:  generating subplan 33_2 for subquery SELECT intermediate_result.x, intermediate_result.y FROM read_intermediate_result('33_1'::text, 'binary'::citus_copy_format) intermediate_result(x integer, y integer) UNION ALL SELECT ref.a, ref.b FROM recursive_union.ref
DEBUG:  Creating router plan
DEBUG:  Plan is router executable
 x | y 
---+---
 1 | 1
 2 | 2
 2 | 2
 3 | 3
(4 rows)

SELECT * FROM ((SELECT * FROM ref) UNION ALL (SELECT * FROM ref)) u ORDER BY 1,2;
DEBUG:  Creating router plan
DEBUG:  Plan is router executable
 a | b 
---+---
 2 | 2
 2 | 2
 3 | 3
 3 | 3
(4 rows)

SELECT * FROM ((SELECT * FROM test) INTERSECT (SELECT * FROM test)) u ORDER BY 1,2;
DEBUG:  generating subplan 37_1 for subquery SELECT x, y FROM recursive_union.test
DEBUG:  generating subplan 37_2 for subquery SELECT x, y FROM recursive_union.test
DEBUG:  Creating router plan
DEBUG:  Plan is router executable
DEBUG:  generating subplan 37_3 for subquery SELECT intermediate_result.x, intermediate_result.y FROM read_intermediate_result('37_1'::text, 'binary'::citus_copy_format) intermediate_result(x integer, y integer) INTERSECT SELECT intermediate_result.x, intermediate_result.y FROM read_intermediate_result('37_2'::text, 'binary'::citus_copy_format) intermediate_result(x integer, y integer)
DEBUG:  Creating router plan
DEBUG:  Plan is router executable
 x | y 
---+---
 1 | 1
 2 | 2
(2 rows)

SELECT * FROM ((SELECT * FROM test) INTERSECT (SELECT * FROM ref)) u ORDER BY 1,2;
DEBUG:  generating subplan 41_1 for subquery SELECT x, y FROM recursive_union.test
DEBUG:  Creating router plan
DEBUG:  Plan is router executable
DEBUG:  generating subplan 41_2 for subquery SELECT intermediate_result.x, intermediate_result.y FROM read_intermediate_result('41_1'::text, 'binary'::citus_copy_format) intermediate_result(x integer, y integer) INTERSECT SELECT ref.a, ref.b FROM recursive_union.ref
DEBUG:  Creating router plan
DEBUG:  Plan is router executable
 x | y 
---+---
 2 | 2
(1 row)

SELECT * FROM ((SELECT * FROM ref) INTERSECT (SELECT * FROM ref)) u ORDER BY 1,2;
DEBUG:  Creating router plan
DEBUG:  Plan is router executable
 a | b 
---+---
 2 | 2
 3 | 3
(2 rows)

SELECT * FROM ((SELECT * FROM test) EXCEPT (SELECT * FROM test)) u ORDER BY 1,2;
DEBUG:  generating subplan 45_1 for subquery SELECT x, y FROM recursive_union.test
DEBUG:  generating subplan 45_2 for subquery SELECT x, y FROM recursive_union.test
DEBUG:  Creating router plan
DEBUG:  Plan is router executable
DEBUG:  generating subplan 45_3 for subquery SELECT intermediate_result.x, intermediate_result.y FROM read_intermediate_result('45_1'::text, 'binary'::citus_copy_format) intermediate_result(x integer, y integer) EXCEPT SELECT intermediate_result.x, intermediate_result.y FROM read_intermediate_result('45_2'::text, 'binary'::citus_copy_format) intermediate_result(x integer, y integer)
DEBUG:  Creating router plan
DEBUG:  Plan is router executable
 x | y 
---+---
(0 rows)

SELECT * FROM ((SELECT * FROM test) EXCEPT (SELECT * FROM ref)) u ORDER BY 1,2;
DEBUG:  generating subplan 49_1 for subquery SELECT x, y FROM recursive_union.test
DEBUG:  Creating router plan
DEBUG:  Plan is router executable
DEBUG:  generating subplan 49_2 for subquery SELECT intermediate_result.x, intermediate_result.y FROM read_intermediate_result('49_1'::text, 'binary'::citus_copy_format) intermediate_result(x integer, y integer) EXCEPT SELECT ref.a, ref.b FROM recursive_union.ref
DEBUG:  Creating router plan
DEBUG:  Plan is router executable
 x | y 
---+---
 1 | 1
(1 row)

SELECT * FROM ((SELECT * FROM ref) EXCEPT (SELECT * FROM ref)) u ORDER BY 1,2;
DEBUG:  Creating router plan
DEBUG:  Plan is router executable
 a | b 
---+---
(0 rows)

-- unions can even be pushed down within a join
SELECT * FROM ((SELECT * FROM test) UNION (SELECT * FROM test)) u JOIN test USING (x) ORDER BY 1,2;
 x | y | y 
---+---+---
 1 | 1 | 1
 2 | 2 | 2
(2 rows)

SELECT * FROM ((SELECT * FROM test) UNION ALL (SELECT * FROM test)) u LEFT JOIN test USING (x) ORDER BY 1,2;
 x | y | y 
---+---+---
 1 | 1 | 1
 1 | 1 | 1
 2 | 2 | 2
 2 | 2 | 2
(4 rows)

-- unions cannot be pushed down if one leaf recurs
SELECT * FROM ((SELECT * FROM test) UNION (SELECT * FROM test ORDER BY x LIMIT 1)) u JOIN test USING (x) ORDER BY 1,2;
DEBUG:  push down of limit count: 1
DEBUG:  generating subplan 55_1 for subquery SELECT x, y FROM recursive_union.test ORDER BY x LIMIT 1
DEBUG:  generating subplan 55_2 for subquery SELECT x, y FROM recursive_union.test
DEBUG:  Creating router plan
DEBUG:  Plan is router executable
DEBUG:  generating subplan 55_3 for subquery SELECT intermediate_result.x, intermediate_result.y FROM read_intermediate_result('55_2'::text, 'binary'::citus_copy_format) intermediate_result(x integer, y integer) UNION SELECT intermediate_result.x, intermediate_result.y FROM read_intermediate_result('55_1'::text, 'binary'::citus_copy_format) intermediate_result(x integer, y integer)
 x | y | y 
---+---+---
 1 | 1 | 1
 2 | 2 | 2
(2 rows)

SELECT * FROM ((SELECT * FROM test) UNION ALL (SELECT * FROM test ORDER BY x LIMIT 1)) u LEFT JOIN test USING (x) ORDER BY 1,2;
DEBUG:  push down of limit count: 1
DEBUG:  generating subplan 59_1 for subquery SELECT x, y FROM recursive_union.test ORDER BY x LIMIT 1
DEBUG:  generating subplan 59_2 for subquery SELECT x, y FROM recursive_union.test
DEBUG:  Creating router plan
DEBUG:  Plan is router executable
DEBUG:  generating subplan 59_3 for subquery SELECT intermediate_result.x, intermediate_result.y FROM read_intermediate_result('59_2'::text, 'binary'::citus_copy_format) intermediate_result(x integer, y integer) UNION ALL SELECT intermediate_result.x, intermediate_result.y FROM read_intermediate_result('59_1'::text, 'binary'::citus_copy_format) intermediate_result(x integer, y integer)
ERROR:  cannot pushdown the subquery
DETAIL:  Complex subqueries and CTEs cannot be in the outer part of the outer join
-- other set operations in joins also cannot be pushed down
SELECT * FROM ((SELECT * FROM test) EXCEPT (SELECT * FROM test ORDER BY x LIMIT 1)) u JOIN test USING (x) ORDER BY 1,2;
DEBUG:  push down of limit count: 1
DEBUG:  generating subplan 63_1 for subquery SELECT x, y FROM recursive_union.test ORDER BY x LIMIT 1
DEBUG:  generating subplan 63_2 for subquery SELECT x, y FROM recursive_union.test
DEBUG:  Creating router plan
DEBUG:  Plan is router executable
DEBUG:  generating subplan 63_3 for subquery SELECT intermediate_result.x, intermediate_result.y FROM read_intermediate_result('63_2'::text, 'binary'::citus_copy_format) intermediate_result(x integer, y integer) EXCEPT SELECT intermediate_result.x, intermediate_result.y FROM read_intermediate_result('63_1'::text, 'binary'::citus_copy_format) intermediate_result(x integer, y integer)
 x | y | y 
---+---+---
 2 | 2 | 2
(1 row)

SELECT * FROM ((SELECT * FROM test) INTERSECT (SELECT * FROM test ORDER BY x LIMIT 1)) u LEFT JOIN test USING (x) ORDER BY 1,2;
DEBUG:  push down of limit count: 1
DEBUG:  generating subplan 67_1 for subquery SELECT x, y FROM recursive_union.test ORDER BY x LIMIT 1
DEBUG:  generating subplan 67_2 for subquery SELECT x, y FROM recursive_union.test
DEBUG:  Creating router plan
DEBUG:  Plan is router executable
DEBUG:  generating subplan 67_3 for subquery SELECT intermediate_result.x, intermediate_result.y FROM read_intermediate_result('67_2'::text, 'binary'::citus_copy_format) intermediate_result(x integer, y integer) INTERSECT SELECT intermediate_result.x, intermediate_result.y FROM read_intermediate_result('67_1'::text, 'binary'::citus_copy_format) intermediate_result(x integer, y integer)
ERROR:  cannot pushdown the subquery
DETAIL:  Complex subqueries and CTEs cannot be in the outer part of the outer join
-- distributed table in WHERE clause, but not FROM clause still disallowed
SELECT * FROM ((SELECT * FROM test) UNION (SELECT * FROM ref WHERE a IN (SELECT x FROM test))) u ORDER BY 1,2;
ERROR:  cannot pushdown the subquery
DETAIL:  Reference tables are not allowed in FROM clause when the query has subqueries in WHERE clause
RESET client_min_messages;
DROP SCHEMA recursive_union CASCADE;
NOTICE:  drop cascades to 2 other objects
DETAIL:  drop cascades to table test
drop cascades to table ref
